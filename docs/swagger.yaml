basePath: /
definitions:
  models.APIError:
    properties:
      details:
        description: Technical details (optional)
        type: string
      field_errors:
        additionalProperties:
          type: string
        description: Validation field errors
        type: object
      message:
        description: User-friendly message
        type: string
      status:
        description: Always "error"
        type: string
    type: object
  models.InputData:
    properties:
      created_at:
        example: "2023-05-22T14:56:32Z"
        type: string
      description:
        example: Detailed item description
        maxLength: 200
        type: string
      email:
        example: user@example.com
        type: string
      name:
        example: Item Name
        maxLength: 50
        minLength: 3
        type: string
      value:
        example: 123ABC
        minLength: 1
        type: string
    required:
    - name
    - value
    type: object
  models.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.Response:
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      status:
        example: success
        type: string
    type: object
  models.TokenPair:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: dev@exemplo.com
    name: Desenvolvedor
    url: https://exemplo.com
  description: Uma API robusta construída em Go usando o framework Gin, oferecendo
    endpoints para gerenciamento de dados com validação completa e autenticação JWT.
  title: Callable API
  version: "1.0"
paths:
  /api/test/gcp:
    get:
      description: Testa a integração com vários serviços Google Cloud Platform (Logging,
        Secret Manager e Storage)
      produces:
      - application/json
      responses:
        "200":
          description: Resultado dos testes de integração
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Erro de serviços não disponíveis
          schema:
            additionalProperties: true
            type: object
      summary: Teste de integração GCP
      tags:
      - gcp
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Autentica o usuário e retorna os tokens JWT
      parameters:
      - description: Credenciais de login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Login de usuário
      tags:
      - auth
  /api/v1/auth/profile:
    get:
      description: Retorna os dados do perfil do usuário autenticado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - Bearer: []
      summary: Perfil do usuário
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Atualiza os dados do perfil do usuário autenticado
      parameters:
      - description: Dados para atualização do perfil
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - Bearer: []
      summary: Atualizar perfil
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Renova os tokens JWT usando um token de atualização
      parameters:
      - description: Token de atualização
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Atualizar tokens
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Cria uma nova conta de usuário no sistema
      parameters:
      - description: Dados de registro
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Registrar um novo usuário
      tags:
      - auth
  /api/v1/data:
    get:
      description: Retorna uma lista paginada de itens
      parameters:
      - description: 'Número da página (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Itens por página (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Listar dados
      tags:
      - data
    post:
      consumes:
      - application/json
      description: Cria um novo item de dados
      parameters:
      - description: Dados do item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.InputData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - Bearer: []
      summary: Criar novo item
      tags:
      - data
  /api/v1/data/{id}:
    get:
      description: Retorna um item específico pelo ID
      parameters:
      - description: ID do item
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Obter dados por ID
      tags:
      - data
  /health:
    get:
      description: Retorna o status atual da API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verificar status da API
      tags:
      - system
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Insert your JWT token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
