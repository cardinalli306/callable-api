basePath: /
definitions:
  models.InputData:
    properties:
      created_at:
        example: "2023-05-22T14:56:32Z"
        type: string
      description:
        example: Detailed item description
        maxLength: 200
        type: string
      email:
        example: user@example.com
        type: string
      name:
        example: Item Name
        maxLength: 50
        minLength: 3
        type: string
      value:
        example: 123ABC
        minLength: 1
        type: string
    required:
    - name
    - value
    type: object
  models.Item:
    properties:
      created_at:
        example: "2023-05-22T14:56:32Z"
        type: string
      description:
        example: Detailed item description
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 5f8d0e6e-6c0a-4f0a-8e0a-6c0a4f0a8e0a
        type: string
      name:
        example: Item Name
        type: string
      value:
        example: ABC123
        type: string
    type: object
  models.ListResponse:
    properties:
      data: {}
      message:
        example: Data retrieved successfully
        type: string
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      status:
        example: success
        type: string
      total_rows:
        example: 42
        type: integer
    type: object
  models.Response:
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      status:
        example: success
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: dev@exemplo.com
    name: Desenvolvedor
    url: https://exemplo.com
  description: Uma API robusta construída em Go usando o framework Gin, oferecendo
    endpoints para gerenciamento de dados com validação completa.
  title: Callable API
  version: "1.0"
paths:
  /api/v1/data:
    get:
      description: Returns a paginated list of available items
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Data retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.ListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Item'
                  type: array
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Get data list
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Add a new item based on provided data
      parameters:
      - description: Item data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.InputData'
      produces:
      - application/json
      responses:
        "201":
          description: Item created
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Item'
              type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Create new item
      tags:
      - items
  /api/v1/data/{id}:
    get:
      description: Returns a specific item based on provided ID
      parameters:
      - description: Item ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Item'
              type: object
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Get item by ID
      tags:
      - items
  /health:
    get:
      description: Returns a 200 status if the API is running
      produces:
      - application/json
      responses:
        "200":
          description: API is running
          schema:
            $ref: '#/definitions/models.Response'
      summary: Check API status
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Insert your JWT token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
